<script type="module" src='dist/js/tab-line.tag.js'></script>

<style>
	/* @import url('https://fonts.googleapis.com/css2?family=Quicksand:wght@300&display=swap');
	@import url('https://fonts.googleapis.com/css2?family=Inconsolata:wght@200&family=Quicksand:wght@300&display=swap'); */
	@import url('https://max.pub/css/publicSans.css');
	@import url('https://max.pub/css/inconsolata.css');

	html {
		font-size: 19px;
	}

	* {
		font-weight: 100;
	}

	body {
		background: #222;
		color: white;
		font-family: quicksand;
		font-weight: 300;
	}

	main {
		width: 100%;
		max-width: 40rem;
		margin: 0 auto;
	}

	tab-line {
		width: 100%;
		padding: 1rem;
		--font: inconsolata;
	}

	h2 {
		margin-top: 4rem;
	}
</style>


<main>
	<h1>TabLine</h1>
	<h3>the minimalist data format</h3>
	<p>
		using only <i>tabs</i> <b>⇥</b> and <i>newlines</i> <b>↵</b> as command-characters <br />
	</p>
	<p>
		newlines separate key-value pairs <br />
		tabs separate keys <br />
		tab-indents enable hierarchies
	</p>
	<p>
		easy parsing (think 300 byte decoders) </br>

	</p>
	<p>
		JSON uses 7 command characters <code>{ } [ ] , " : </code>
	</p>
	<p>
		XML uses 4 command characters <code>< > " ' </code>
	</p>


	<h2>Data</h2>
	<p>
		example with type auto-detection <br />
		(hover over a value to see its type)

	</p>
	<tab-line id='data'></tab-line>


	<h2>Schema</h2>
	<p>
		declare cardinalities and types
	</p>
	<tab-line class='definition'></tab-line>


	<h2>Validation</h2>
	<p>validate data against a schema</p>
	<tab-line definition='data/contact.def.tali'></tab-line>


	<h2>Transformation</h2>
	<p>transform TabLine data into something else</p>
	<p>
		~ sibling <br />
		^ parent

	</p>
	<tab-line class='transformation'></tab-line>



	<h2>Automatic Class Definitions</h2>
	<p>automatically create native class definitions for the language of your choice</p>
	<ul>
		<li>TypeScript</li>
		<li>Dart</li>
		<li>Kotlin</li>
		<li>...</li>
	</ul>



	<h2>Types</h2>
	<ul>
		<li>int (8,16,32,64)</li>
		<li>real</li>
		<li>range</li>

		<li>UUID</li>

		<li>enum</li>

		<li>string</li>
		<li>letters</li>
		<li>email</li>
		<li>url</li>
		<li>date, time, datetime</li>
	</ul>


</main>

<script>
	(async function () {
		document.querySelector('#data').textContent = await fetch('data/contact.tali').then(x => x.text());
		document.querySelector('[definition]').textContent = await fetch('data/contact.tali').then(x => x.text());
		document.querySelector('.definition').textContent = await fetch('data/contact.def.tali').then(x => x.text());
		document.querySelector('.transformation').textContent = await fetch('data/contact.t.tali').then(x => x.text());
	})()
</script>